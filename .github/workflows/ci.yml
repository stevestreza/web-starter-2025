name: Docker CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Frontend.Dockerfile
          push: false
          tags: web-starter-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Backend.Dockerfile
          push: false
          tags: web-starter-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Create test network
        run: docker network create test-network
      
      - name: Start PostgreSQL container
        run: |
          docker run -d \
            --name postgres-test \
            --network test-network \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=webstarter \
            postgres:16-alpine
      
      - name: Start backend container and verify health
        run: |
          docker run -d \
            --name backend-test \
            --network test-network \
            -e DATABASE_URL=postgresql://postgres:postgres@postgres-test:5432/webstarter \
            -e NODE_ENV=production \
            -p 3000:3000 \
            web-starter-backend:latest
          
          # Wait for backend to start
          timeout 30s bash -c 'until curl -s http://localhost:3000/api/health; do sleep 2; done' || exit 1
          
          # Verify health endpoint
          response=$(curl -s http://localhost:3000/api/health)
          if [[ "$response" != *"status"*":"*"ok"* ]]; then
            echo "Backend health check failed: $response"
            exit 1
          else
            echo "Backend health check passed: $response"
          fi
      
      - name: Start frontend container and verify health
        run: |
          docker run -d \
            --name frontend-test \
            --network test-network \
            -p 8080:80 \
            web-starter-frontend:latest
          
          # Wait for frontend to start
          timeout 30s bash -c 'until curl -s http://localhost:8080; do sleep 2; done' || exit 1
          
          # Verify that the frontend loads properly
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080)
          if [[ "$response" != "200" ]]; then
            echo "Frontend health check failed with status code: $response"
            exit 1
          else
            echo "Frontend health check passed with status code: $response"
          fi 